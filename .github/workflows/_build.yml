name: Build

on:
  workflow_call:
    inputs:
      commit:
        required: true
        type: string
      version:
        required: false
        type: string

env:
  SOLUTION_FILE_PATH: .
  DEFAULT_BRANCH: main

jobs:
  build:
    runs-on: windows-2022
    permissions:
      checks: write
    defaults:
      run:
        working-directory: ${{ github.workspace }} 
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit }}
        submodules: 'true'
        fetch-depth: 0

    - name: Prepare test submodules
      shell: pwsh
      run: |
        ./Scripts/UpdateSubmodules.ps1

    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: '[17.0, ]'

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5

    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1

    - name: Restore NuGet packages
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Strip leading "v" from version
      if: inputs.version != ''
      id: strip_version
      shell: pwsh
      run: |
        $version = '${{ inputs.version }}'
        if ($version -match '^v(\d+\.\d+\.\d+)-nightly\.(\d+)$') {
          $version = "$($matches[1]).$($matches[2])"
        } elseif ($version.StartsWith('v')) {
          $version = $version.Substring(1)
        }
        echo "::set-output name=vsix_compatible_version::$version"

    - name: Set VSIX version
      if: inputs.version != ''
      uses: cezarypiatek/VsixVersionAction@1.0
      with:
        version: ${{ steps.strip_version.outputs.vsix_compatible_version }}
        vsix-manifest-file: .\GitTreeFilter\source.extension.vsixmanifest

    - name: Build
      run: msbuild ${{env.SOLUTION_FILE_PATH}} /p:configuration=Release /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /v:m
      shell: powershell

    - name: Test
      run: dotnet test ${{env.SOLUTION_FILE_PATH}} --logger "trx;LogFileName=test-results.trx"

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test results
        path: "**/*.trx"                            
        reporter: dotnet-trx
        fail-on-error: true

    - name: Rename VSIX file
      if: inputs.version != ''
      shell: pwsh
      run: |
        Copy-Item -Path .\GitTreeFilter\bin\Release\GitTreeFilter.vsix -Destination GitTreeFilter-${{ inputs.version }}.vsix

    - name: Upload GitTreeFilter.vsix
      if: inputs.version != ''
      uses: actions/upload-artifact@v4
      with:
        name: GitTreeFilter-${{ inputs.version }}.vsix
        path: GitTreeFilter-${{ inputs.version }}.vsix
